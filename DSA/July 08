####Flood Fill

class Solution {
private:
    void bfs(vector<vector<int>>& image, int sr, int sc,int original, int color){
        queue<pair<int,int>> q;
        vector<vector<int>> visited(image.size(), vector<int>(image[0].size(), 0));

        q.push({sr,sc});
        visited[sr][sc] = 1;
        image[sr][sc] = color;

        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};
        while(!q.empty()){
            int r = q.front().first;
            int c = q.front().second;
            q.pop();

            for(int i =0;i<4;i++){
                int nr = r + dr[i];
                int nc = c + dc[i];
                if(nr>=0 && nr<image.size() && nc>=0 && nc<image[0].size() && !visited[nr][nc] && image[nr][nc] == original){
                    image[nr][nc] = color;
                    visited[nr][nc] = 1;
                    q.push({nr,nc});
                }
            }
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int original = image[sr][sc];
        bfs(image,sr,sc,original,color);

        return image;
    }
};

####Count Good Numbers

class Solution {
    static const long long MOD = 1'000'000'007;

public:
    long long myPow(long long x, long long n, long long mod) {
        long long ans = 1;
        x %= mod;
        while (n > 0) {
            if (n % 2 != 0) {
                ans = (ans * x) % mod;
            }
            x = (x * x) % mod;
            n = n / 2;
        }
        return ans;
    }

    int countGoodNumbers(long long n) {
        return (int)((myPow(5, n / 2 + n % 2, MOD) * myPow(4, n / 2, MOD)) % MOD);
    }
};

####Permutation ||

class Solution {
public:

    void permuteUniqueHelper(int i, vector<int>& nums, vector<vector<int> >& result) {
        if (i == nums.size()) { result.emplace_back(nums); return; }
        unordered_set<int> st;
        for (int j = i; j < nums.size(); ++j) {
            if (st.count(nums[j]) == 1) { continue; }
            st.insert(nums[j]);
            std::swap(nums[i], nums[j]);
            permuteUniqueHelper(i + 1, nums, result);
            std::swap(nums[i], nums[j]);
        }
    }
    
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > result;
        permuteUniqueHelper(0, nums, result);
        return result;
    }
};

####Rabbits in Forest

class Solution 
{
public:
    int numRabbits(vector<int>& answers) 
    {
        unordered_map<int, int> freq;
        int total = 0;

        for (int ans : answers) 
        {
            freq[ans]++;
        }

        for (auto& [k, count] : freq) 
        {
            int groupSize = k + 1;

            int groups = ceil((double)count / groupSize);

            total += groups * groupSize;
        }
        return total;
    }
};
