####Two_Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
         int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {};      // in case of no solution
    }
};


####Alone_in_Couple

class Solution {
  public:
    int findSingle(vector<int> &arr) {
        // we can solve by sorting the array first 
        // and then finding single element
        sort(arr.begin(),arr.end());
        
        for(int i=0;i<arr.size()-1;i+=2){
            if (arr[i]!=arr[i+1]){
                return arr[i];
            }
        }
            return arr.back(); // if all pairs are matched single element is last element
        
    }
};


####Best_Time_to_Buy_and_Sell_Stock

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int buy_stock=prices[0];
        int profit=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]<buy_stock){
                buy_stock=prices[i];
            }else if(prices[i]-buy_stock>profit){
                profit=prices[i]-buy_stock;
            }
        }
        return profit;
    }
};


####Sort_Colors

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // initialize 3 pointers to indicate start, middle and end of array
        // keep all 0s before start pointer, all 2s after end pointer
        int start = 0, mid = 0, end = nums.size()-1;
        while(mid <= end){
            if(nums[mid] == 0){
                swap(nums[start], nums[mid]);
                start++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            else{
                swap(nums[mid], nums[end]);
                end--;
            }
        }
    }
};
