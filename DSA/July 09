####Climbing Stairs

class Solution {
public:
    int climbStairs(int n) {
        int ways = 1;

        for (int i = 1; i <= n / 2; i++) {
            double sum = 1;

            for (int j = i; j < 2 * i; j++) {
                sum *= (double)(n - j) / (j - i + 1);
            }

            ways +=sum;
        }

        return ways;
    }
};

####Subsets

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        int n = nums.size();

        // Loop through all possible combinations
        for (int num = 0; num < (1 << n); num++) {
            vector<int> sub;

            // For each bit in 'num', check if it is set
            for (int i = 0; i < n; i++) {
                // If i-th bit is 1, include nums[i]
                if (num & (1 << i)) {
                    sub.push_back(nums[i]);
                }
            }

            res.push_back(sub);
        }

        return res;
    }
};

####House Robber

class Solution {
public:
    int memo(int i, int end, vector<int>& nums, vector<int>& dp) {
        if (i > end) return 0;
        if (dp[i] != -1) return dp[i];
        int pick = nums[i] + memo(i + 2, end, nums, dp);
        int dont = memo(i + 1, end, nums, dp);
        return dp[i] = max(pick, dont);
    }

    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> dp(n, -1);
        int one = memo(0, n - 2, nums, dp);
        fill(dp.begin(), dp.end(), -1);
        int two = memo(1, n - 1, nums, dp);
        return max(one, two);
    }
};

####House Robber 2

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) {
            return 0;
        }

        vector<int> s0(2, 0);
        vector<int> s1(2, 0);
        s1[0] = nums[0];

        for (int i = 1; i < n; i++) {
            s0[i % 2] = max(s0[(i - 1) % 2], s1[(i - 1) % 2]);
            s1[i % 2] = s0[(i - 1) % 2] + nums[i];
        }

        return max(s0[(n - 1) % 2], s1[(n - 1) % 2]);
    }
};

