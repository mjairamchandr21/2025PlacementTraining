####Search in Rotated Sorted Array

class Solution {
    int func(vector<int>& nums){
        int l=0;
        int r=nums.size()-1;
        while(l<r){
            int mid=l+(r-l)/2;
            if(nums[r]<nums[mid]){
                l=mid+1;
            }
            else{
                r=mid;
            }
        }
        return l;
    }
public:
    int search(vector<int>& nums, int target) {
        int firstInd=func(nums);
        int l=0;
        int r=0;
        if(target>=nums[firstInd] && nums[nums.size()-1]>=target){
            l=firstInd;
            r=nums.size()-1;
        }
        else{
            l=0;
            r=firstInd-1;
        }

        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]>target){
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return -1;
    }
};

####Find Peak Element

class Solution {
public:
    int findPeakElement(vector<int>& arr) 
    {
        int n=arr.size();
        if(n==1){
            return 0;
        }
        if(arr[0]>arr[1]){
            return 0;
        }
        if(arr[n-1]>arr[n-2]){
            return n-1;
        }
        int low=1;
        int high=n-2;

        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1]) return mid;

            if(arr[mid]>arr[mid-1]){
                low=mid+1;
            }
            else if(arr[mid]<arr[mid-1]){
                high=mid-1;
            }
            else low=mid+1;
        }
        return -1;
    }
};

####Allocate Minimum Pages

class Solution {
  public:
    bool canPartition(vector<int> &arr, int n,int mid, int k){
        int cnt=1;
        int pageSum =0;
        for(int i=0;i<n;i++){
            if(pageSum + arr[i] <=mid){
                pageSum += arr[i];
            }
            else{
                cnt++;
                if(cnt>k)   return false;
                pageSum = arr[i];
            }
        }
        return true;
    }
    int findPages(vector<int> &arr, int k) {
        int n= arr.size();
        if(k>n) return -1;
        
        int sum= 0;
        for(int i:arr)  sum+=i;
        
        int ans=-1;
        
        int s = *max_element(arr.begin(), arr.end());  
        int e = sum;
        
        while(s<=e){
            int mid = s + (e-s)/2;
            if(canPartition(arr, n, mid, k)){
                ans = mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
};

####Minimum Number of Days to Make Bouquets

class Solution {
public:
    int numOfBouquet(vector<int>& bloomDay, int day, int k){
        int bouquets(0), flowers(0);
        for(int bloom: bloomDay){
            if(bloom <= day){
                flowers++;
                if(flowers == k){
                    flowers = 0;
                    bouquets++;
                }
            }
            else flowers = 0;
        }
        return bouquets;
    }

    int minDays(vector<int> bloomDay, int m, int k){
        long long totalFlowers = (long long)m * k;
        if(bloomDay.size() < totalFlowers) return -1;
        
        int left = *min_element(bloomDay.begin(), bloomDay.end());
        int right = *max_element(bloomDay.begin(), bloomDay.end());
        
        while(left < right){
            int mid = left + (right - left) / 2;
            int bouquetCount = numOfBouquet(bloomDay, mid, k);
            if(bouquetCount >= m) right = mid;
            else left = mid + 1;
        }
        
        return left;
    }
};
